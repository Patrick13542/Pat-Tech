package com.pattech.core;

import net.minecraft.client.Minecraft;
import net.minecraft.client.model.ModelBlaze;
import net.minecraft.client.renderer.entity.RenderItem;
import net.minecraft.client.resources.model.ModelResourceLocation;
import net.minecraft.enchantment.Enchantment;
import net.minecraft.entity.EntityList;
import net.minecraft.entity.EnumCreatureType;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.Item.ToolMaterial;
import net.minecraft.item.ItemArmor.ArmorMaterial;
import net.minecraft.item.ItemStack;
import net.minecraft.world.biome.BiomeGenBase;
import net.minecraftforge.common.util.EnumHelper;
import net.minecraftforge.fml.client.registry.RenderingRegistry;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.registry.EntityRegistry;
import net.minecraftforge.fml.common.registry.GameRegistry;
import net.minecraftforge.fml.relauncher.Side;

import com.pattech.blocks.BlockManager;
import com.pattech.entity.RenderSubatomicBlaze;
import com.pattech.entity.SubatomicBlaze;
import com.pattech.items.ItemManager;
import com.pattech.lib.Reference;

@Mod(modid = Reference.MODID, version = Reference.VERSION)
public class Core {
	public static ToolMaterial DrillMaterial;
	public static ToolMaterial VortexMaterial;
	public static ToolMaterial ChainsawMaterial;
	public static ToolMaterial ElectricHoeMaterial;
	public static ArmorMaterial VortexArmorMaterial;

    @EventHandler
    public void init(FMLInitializationEvent event) {
    	if(event.getSide() == Side.CLIENT)
        {	
    		
    		RenderingRegistry.registerEntityRenderingHandler(SubatomicBlaze.class, new RenderSubatomicBlaze(new ModelBlaze()));
    		
            RenderItem renderItem = Minecraft.getMinecraft().getRenderItem();
            
            renderItem.getItemModelMesher().register(ItemManager.screwDriver, 0, new ModelResourceLocation(Reference.MODID + ":" + ItemManager.screwDriver.name, "inventory"));
            renderItem.getItemModelMesher().register(ItemManager.ironRod, 0, new ModelResourceLocation(Reference.MODID + ":" + ItemManager.ironRod.name, "inventory"));
            renderItem.getItemModelMesher().register(ItemManager.diamondDrill, 0, new ModelResourceLocation(Reference.MODID + ":" + ItemManager.diamondDrill.name, "inventory"));
            renderItem.getItemModelMesher().register(ItemManager.vortexBlade, 0, new ModelResourceLocation(Reference.MODID + ":" + ItemManager.vortexBlade.name, "inventory"));
            renderItem.getItemModelMesher().register(ItemManager.chainSaw, 0, new ModelResourceLocation(Reference.MODID + ":" + ItemManager.chainSaw.name, "inventory"));
            renderItem.getItemModelMesher().register(ItemManager.electricHoe, 0, new ModelResourceLocation(Reference.MODID + ":" + ItemManager.electricHoe.name, "inventory"));
        	renderItem.getItemModelMesher().register(ItemManager.vortexHelm, 0, new ModelResourceLocation(Reference.MODID + ":" + ItemManager.vortexHelm.name, "inventory"));
        	renderItem.getItemModelMesher().register(ItemManager.vortexChest, 0, new ModelResourceLocation(Reference.MODID + ":" + ItemManager.vortexChest.name, "inventory"));
        	renderItem.getItemModelMesher().register(ItemManager.vortexLeggs, 0, new ModelResourceLocation(Reference.MODID + ":" + ItemManager.vortexLeggs.name, "inventory"));
        	renderItem.getItemModelMesher().register(ItemManager.vortexBoots, 0, new ModelResourceLocation(Reference.MODID + ":" + ItemManager.vortexBoots.name, "inventory"));
        	renderItem.getItemModelMesher().register(ItemManager.nIngot, 0, new ModelResourceLocation(Reference.MODID + ":" + ItemManager.nIngot.name, "inventory"));
        	renderItem.getItemModelMesher().register(ItemManager.pIngot, 0, new ModelResourceLocation(Reference.MODID + ":" + ItemManager.pIngot.name, "inventory"));
        	
        	
        	renderItem.getItemModelMesher().register(Item.getItemFromBlock(BlockManager.copperOre), 0, new ModelResourceLocation(Reference.MODID + ":" + BlockManager.copperOre.name, "inventory"));
        	renderItem.getItemModelMesher().register(Item.getItemFromBlock(BlockManager.iridiumOre), 0, new ModelResourceLocation(Reference.MODID + ":" + BlockManager.iridiumOre.name, "inventory"));
        	renderItem.getItemModelMesher().register(Item.getItemFromBlock(BlockManager.pitchBlend), 0, new ModelResourceLocation(Reference.MODID + ":" + BlockManager.pitchBlend.name, "inventory"));
        	renderItem.getItemModelMesher().register(Item.getItemFromBlock(BlockManager.silverOre), 0, new ModelResourceLocation(Reference.MODID + ":" + BlockManager.silverOre.name, "inventory"));
        	renderItem.getItemModelMesher().register(Item.getItemFromBlock(BlockManager.tinOre), 0, new ModelResourceLocation(Reference.MODID + ":" + BlockManager.tinOre.name, "inventory"));
        	renderItem.getItemModelMesher().register(Item.getItemFromBlock(BlockManager.rubberWood), 0, new ModelResourceLocation(Reference.MODID + ":" + BlockManager.rubberWood.name, "inventory"));
        	
        	
    		ItemStack Helm = new ItemStack(ItemManager.vortexHelm, 1);
    		ItemStack Chest = new ItemStack(ItemManager.vortexChest, 1);
    		ItemStack Leggs = new ItemStack(ItemManager.vortexLeggs, 1);
    		ItemStack Boots = new ItemStack(ItemManager.vortexBoots, 1);
    		ItemStack ScrewDriver = new ItemStack(ItemManager.screwDriver, 1);
    		ItemStack Rod = new ItemStack(ItemManager.ironRod, 1);
    		
    	GameRegistry.addShapedRecipe((Helm), "XXX", "X X", 'X' , Items.nether_star);
    	GameRegistry.addShapedRecipe(Chest, "X X", "XXX", "XXX", 'X', Items.nether_star);
    	GameRegistry.addShapedRecipe(Leggs, "XXX", "X X", "X X", 'X', Items.nether_star);
    	GameRegistry.addShapedRecipe(Boots, "X X", "X X", 'X',  Items.nether_star);
    	GameRegistry.addShapedRecipe(ScrewDriver, " X ", "ZYZ", "ZYZ", 'X', Items.iron_ingot, 'Y', Rod, 'Z', new ItemStack(Items.dye,1,1));
       	
    	Helm.addEnchantment(Enchantment.aquaAffinity, 2);
       	Boots.addEnchantment(Enchantment.featherFalling, 10);
       	Leggs.addEnchantment(Enchantment.fireProtection, 2);
       	Chest.addEnchantment(Enchantment.projectileProtection, 2);
       	
       	addSpawn(SubatomicBlaze.class, 1000, 1, 5, EnumCreatureType.MONSTER);
       	
        }
    }	
    	public static void createEntity(Class entityClass, String entityName, int solidColor, int spotColor) {
    	    int entityId = EntityRegistry.findGlobalUniqueEntityId();
    	    EntityRegistry.registerGlobalEntityID(entityClass, entityName, entityId);
    	    EntityList.entityEggs.put(Integer.valueOf(entityId), new EntityList.EntityEggInfo(entityId, solidColor, spotColor));
    	    
}
    	
    	public static void addSpawn(Class entityClass, int probability, int min, int max, EnumCreatureType type) {
    		for (int i = 0; i < BiomeGenBase.getBiomeGenArray().length; i++) {
    			if (BiomeGenBase.getBiomeGenArray() [i] != null) {
    				 
    				 
    			}
    	    }
    		EntityRegistry.addSpawn(entityClass, probability, min, max, type, BiomeGenBase.getBiomeGenArray()[BiomeGenBase.mesa.biomeID]);
    	}   	       	       	
    	
    @EventHandler
    public void preInit(FMLPreInitializationEvent event) {
    	
    	createEntity(SubatomicBlaze.class, "SubatomicBlaze", 0x00FF00, 0xFF0000);
    	VortexMaterial = EnumHelper.addToolMaterial("VortexMaterial", 0, 0, 0, 66, 0);
    	DrillMaterial = EnumHelper.addToolMaterial("DrillMaterial", 3, 0, 8, 0, 30);
    	ChainsawMaterial = EnumHelper.addToolMaterial("ChainsawMaterial", 3, 0, 16, 8, 0);
    	ElectricHoeMaterial = EnumHelper.addToolMaterial("ElectricHoeMaterial", 0, 0, 0, 0, 0);
    	VortexArmorMaterial = EnumHelper.addArmorMaterial("VortexArmorMaterial", "VortexArmor", 0, new int [] {5, 5, 10, 4}, 0);
    	
    	ItemManager.mainRegistry();
    	BlockManager.mainRegistry();
    	    		 
        }
    
    @EventHandler
    public void postInit(FMLPostInitializationEvent event) {
    	
    }

}
